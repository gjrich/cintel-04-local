[{"name": "app.py", "content": "# Previous imports and data preparation code remains the same until the header section\nimport plotly.express as px\nfrom shiny.express import input, ui, output, render\nfrom shinywidgets import render_plotly, render_widget\nfrom shiny import reactive\nimport palmerpenguins\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Load and prepare data\npenguin_df = palmerpenguins.load_penguins()\n\n# Get unique values and ranges for UI choices\nspecies_choices = sorted(penguin_df['species'].unique().tolist())\nisland_choices = sorted(penguin_df['island'].unique().tolist())\nsex_choices = sorted(penguin_df['sex'].dropna().unique().tolist())\nmass_min = int(penguin_df['body_mass_g'].min())\nmass_max = int(penguin_df['body_mass_g'].max())\n\n# Set some style configurations\nplt.style.use('seaborn-darkgrid')\ncustom_colors = px.colors.qualitative.Set3\n\n# Main UI layout\nui.page_opts(\n    title=\"Palmer Penguins Dashboard\",\n    fillable=True\n)\n\n# Add header with improved layout\n# Add header with improved layout\nwith ui.layout_columns():\n    with ui.card(style=\"background-color: #2c3e50; color: white; height: 80px; overflow: hidden;\"):\n        with ui.div(class_=\"d-flex justify-content-between align-items-center\", style=\"height: 100%; padding: 0 20px;\"):\n            ui.h2(\"Palmer Penguins Dashboard\", style=\"margin: 0;\")\n            ui.h4(\"\ud83d\udc27 Just Chillin' with Some Cool Data! \ud83e\uddca\", style=\"color: #95a5a6; margin: 0;\")\n\n\n# Data tables in collapsed cards\nwith ui.layout_columns():\n    with ui.card():\n        with ui.accordion(id=\"data_accordion\"):\n            with ui.accordion_panel(\"View Raw Data Tables\"):\n                with ui.layout_columns(cols=2):\n                    with ui.card():\n                        \"Penguin Data Table\"\n                        @render.data_frame\n                        def penguintable():\n                            return render.DataTable(penguin_df, filters=False, height=\"200px\")\n                    \n                    with ui.card():\n                        \"Penguin Data Grid\"\n                        @render.data_frame\n                        def penguingrid():\n                            return render.DataGrid(penguin_df, filters=False, height=\"200px\")\n\n# Sidebar with increased width and fixed styling\nwith ui.sidebar(open=\"open\"):\n    \n    ui.div(\n        style=\"background-color: #34495e; padding: 10px; border-radius: 5px; margin: 10px 0;\",\n        class_=\"h-100\"\n    )\n    ui.h3(\"\ud83d\udc27 Control Panel\")\n    \n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Select Attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n        width=\"100%\"\n    )\n    \n    ui.input_numeric(\n        \"plotly_bin_count\",\n        label=\"Plotly hist bin count\",\n        value=15,\n        min=2,\n        max=50\n    )\n    \n    ui.input_slider(\n        \"seaborn_bin_count\",\n        label=\"Seaborn hist bin count\",\n        min=2,\n        max=50,\n        value=15\n    )\n    \n    ui.hr()\n    \n    ui.div(\n        ui.input_checkbox_group(\n            \"selected_species_list\",\n            label=\"Species Filter\",\n            choices=species_choices,\n            selected=[species_choices[0]],\n            inline=True,\n        ),\n        id=\"species-filter-group\",\n        style=\"background-color: #34495e; padding: 10px; border-radius: 5px; margin: 10px 0;\"\n    )\n    \n    ui.div(\n        ui.input_checkbox_group(\n            \"selected_island_list\",\n            label=\"Island Filter\",\n            choices=island_choices,\n            selected=[island_choices[0]],\n            inline=True,\n        ),\n        id=\"island-filter-group\",\n        style=\"background-color: #34495e; padding: 10px; border-radius: 5px; margin: 10px 0;\"\n    )\n    \n    ui.div(\n        ui.input_checkbox_group(\n            \"selected_sex_list\",\n            label=\"Sex Filter\",\n            choices=sex_choices,\n            selected=sex_choices,\n            inline=True,\n        ),\n        id=\"sex-filter-group\",\n        style=\"background-color: #34495e; padding: 10px; border-radius: 5px; margin: 10px 0;\"\n    )\n    \n    ui.input_slider(\n        \"mass_min_max_range\",\n        \"Mass Range (g)\",\n        min=mass_min,\n        max=mass_max,\n        value=[mass_min, mass_max]\n    )\n    \n    ui.hr()\n    ui.a(\n        \"\ud83d\udcca gjrich github\",\n        href=\"https://github.com/gjrich/cintel-03-reactive/\",\n        target=\"_blank\",\n        style=\"color: #3498db;\"\n    )\n    \n    \n    \n# CSS editing for filter groups\nui.tags.style(\"\"\"\n    #species-filter-group label,\n    #island-filter-group label,\n    #sex-filter-group label {\n        color: white;\n    }\n\"\"\")\n    \n# Reactive function to filter data\n@reactive.Calc\ndef filtered_data() -> pd.DataFrame:\n    try:\n        filtered_df = penguin_df.copy()\n        \n        # Apply filters\n        selected_species = [s.lower() for s in input.selected_species_list()]\n        filtered_df = filtered_df[filtered_df[\"species\"].str.lower().isin(selected_species)]\n        \n        selected_island = [i.lower() for i in input.selected_island_list()]\n        filtered_df = filtered_df[filtered_df[\"island\"].str.lower().isin(selected_island)]\n        \n        selected_sex = [s.lower() for s in input.selected_sex_list()]\n        filtered_df = filtered_df[filtered_df[\"sex\"].str.lower().isin(selected_sex)]\n        \n        selected_min_mass, selected_max_mass = input.mass_min_max_range()\n        filtered_df = filtered_df[\n            (filtered_df[\"body_mass_g\"] <= selected_max_mass) & \n            (filtered_df[\"body_mass_g\"] >= selected_min_mass)\n        ]\n        \n        return filtered_df if not filtered_df.empty else penguin_df\n        \n    except Exception as e:\n        print(f\"Error in filtered_data: {e}\")\n        return penguin_df\n\n# Visualizations with improved styling\nwith ui.layout_columns(fills=True):\n    with ui.card():\n        ui.card_header(\"\ud83d\udcca Plotly Histogram\", style=\"background-color: #2c3e50; color: white;\")\n        @render_widget\n        def plot1():\n            return px.histogram(\n                data_frame=filtered_data(),\n                x=input.selected_attribute(),\n                nbins=input.plotly_bin_count(),\n                color_discrete_sequence=[custom_colors[0]]\n            ).update_layout(\n                paper_bgcolor='rgba(0,0,0,0)',\n                plot_bgcolor='rgba(0,0,0,0)',\n                title={\"text\": f\"Distribution of {input.selected_attribute()}\", \"x\": 0.5},\n                yaxis_title=\"Count\",\n                xaxis_title=input.selected_attribute().replace('_', ' ').title(),\n                showlegend=False\n            )\n\n    with ui.card():\n        ui.card_header(\"\ud83d\udcc8 Seaborn Histogram\", style=\"background-color: #2c3e50; color: white;\")\n        @render.plot\n        def plot2():\n            plt.clf()\n            fig, ax = plt.subplots(figsize=(8, 6))\n            ax = sns.histplot(\n                data=filtered_data(),\n                x=input.selected_attribute(),\n                bins=input.seaborn_bin_count(),\n                color=\"#55A868\"  # Using a specific hex color\n            )\n            ax.set_title(f\"Distribution of {input.selected_attribute().replace('_', ' ').title()}\")\n            ax.set_xlabel(input.selected_attribute().replace('_', ' ').title())\n            ax.set_ylabel(\"Count\")\n            plt.tight_layout()\n            return fig\n\nwith ui.layout_columns(fills=True):\n    with ui.card():\n        ui.card_header(\"\ud83d\udd0d Species Comparison\", style=\"background-color: #2c3e50; color: white;\")\n        @render_plotly\n        def plotly_scatterplot():\n            data = filtered_data()\n            if not data.empty:\n                return px.scatter(\n                    data_frame=data,\n                    x=\"bill_length_mm\",\n                    y=\"bill_depth_mm\",\n                    color=\"island\",\n                    symbol=\"species\",\n                    labels={\n                        \"bill_depth_mm\": \"Bill Depth (mm)\",\n                        \"bill_length_mm\": \"Bill Length (mm)\",\n                        \"species\": \"Species\",\n                        \"island\": \"Island\"\n                    }\n                ).update_layout(\n                    paper_bgcolor='rgba(0,0,0,0)',\n                    plot_bgcolor='rgba(0,0,0,0)',\n                    title={\"text\": \"Bill Dimensions by Species and Island\", \"x\": 0.5}\n                )\n            else:\n                return px.scatter()\n\n    with ui.card():\n        ui.card_header(\"\u2696\ufe0f Mass Distribution\", style=\"background-color: #2c3e50; color: white;\")\n        @render.plot\n        def seaborn_histogram():\n            plt.clf()\n            fig, ax = plt.subplots(figsize=(8, 6))\n            sns.histplot(\n                data=filtered_data(),\n                x=\"body_mass_g\",\n                bins=input.seaborn_bin_count(),\n                color=\"#4C72B0\"  # Using a specific hex color\n            )\n            plt.title(\"Distribution of Penguin Mass\")\n            plt.xlabel(\"Mass (g)\")\n            plt.ylabel(\"Count\")\n            plt.tight_layout()\n            return fig", "type": "text"}]